Describe how and what each group member contributed for the past two weeks. If you are solo, these points will be part of the next section.
Joon: The code required a foundation beyond the boilerplate (such as setting up the Player class in a format compatible with our AI). For the first week, apart from coding the foundation (e.g. the code for updating the board properly, the code for gathering the list of possible moves, etc.), I also coded the SimplePlayer AI (chooses a random move among a list of possible moves) and an AI that played greedily (chooses the move that would take the most pieces). Oddly enough, against another random AI, the random AI sometimes appeared to win more often than the greedy AI. In week 2, I discussed with Alex how to improve the AI past Minimax; he did the actual implementation.

Alex: For the first week, I implemented the Minimax algorithm, and handled the setting up of the GitHub page and the submission details.  In the second week, I implemented various score functions which causes our AI to value corners very highly, edges somewhat highly, and any square adjacent to a corner or edge negatively, since it gives the opponent a chance to hold an edge or corner space.  I also implemented a 3-step Minimax, but this by itself was not reliably beating ConstantTimePlayer.  When combined with the Minimax, our bot performed worse than with the altered score function alone (which, after spending time tuning parameters, achieves over 80% winrate against ConstantTimePlayer).  

Document the improvements that your group made to your AI to make it tournament-worthy. Explain why you think your strategy(s) will work. Feel free to discuss any ideas were tried but didn't work out.

Building on the greedy algorithm, we tuned some meta-parameters to decide on a good score function to use to greedily pick our move.  We considered alpha-beta pruning, but we decided b/c of our heuristic function, our prediction of opponentâ€™s moves would be poor enough that it would be unhelpful, just as Minimax was found to be.  Our better-heuristic greedy algorithm should act simply enough that any bot which predicts too much with Minimax should mis-predict our moves, and we should gain an advantage in such match-ups.  
